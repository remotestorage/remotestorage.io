.hero
  .container
    section.content
      .row
        .header
          h2 Integrate storage
          p.claim.
            Add remoteStorage to your app
        .actions
          ul
            li
              p
                a.btn(href="http://remotestoragejs.com/release/0.7.0/remoteStorage.min.js") Download remoteStorage.js 0.7.0
              p.meta
                | 52KB minified, gzipped
                | <span class="divider">&middot;</span> 
                a(href="http://remotestoragejs.com/release/0.7.0/remoteStorage-debug.js") Debug build
            li
              p
                a.btn(href="http://remotestoragejs.com/doc/code/files/remoteStorage-js.html") JS API Documentation
              p.meta
                | Version 0.7.0
                // | <span class="divider">&middot;</span> 
                // a(href="http://remotestoragejs.com/build/0.7.0-head/remoteStorage-debug.js") Latest version

.container
  section.content.bordered
    .benefits
      section.freedom
        h3 Backend as a Service
        :markdown
          Develop your web app without worrying about hosting or even developing
          the backend for it: your users will connect their own backend at runtime.
      section.offline
        h3 Infinite Scalability
        :markdown
          No matter if 5 hundred or 5 million users are using your app, your
          backend scales automatically and never costs you a single cent.
      section.freedom
        h3 Wheels Included
        :markdown
          [remoteStorage.js](https://github.com/remotestorage/remotestorage.js)
          is a JavaScript library that does all the heavy-lifting of connecting
          to any remoteStorage backend, caching, synchronizing and storing user
          data.

  .with_subnav
    nav.fixed(data-scrolltop="495")
      ul
        li
          a(href="/integrate/#") remoteStorage.js
          ul
            li
              a(href="/integrate/#widget") The Widget
            li
              a(href="/integrate/#modules") Categories, Modules &amp; Schemas
            li
              a(href="/integrate/#examples") Example apps
            li
              a(href="/integrate/#resources") Resources
        // li
        //   a(href="#") Modules
        //   ul
        //     li
        //       a(href="/integrate/#widget") Available modules
        //     li
        //       a(href="/integrate/#modules") How to define a schema
      // need some content so that the element doesn't collapse
      &nbsp;

    section.content
      .integrate
        :markdown
          ### Getting started with remoteStorage.js

          Although you may choose to integrate remoteStorage sync in your
          server-side program, or using a custom client-side library, we
          usually recommend and assume you use
          [remoteStorage.js](https://github.com/remotestorage/remotestorage.js)
          in a client-side web application. Here's a quick overview of how that
          works:

          <h4 id="widget">1. The Widget</h4>

          <img class="widget" src="/img/widget.png" alt="widget">

          The remoteStorage widget allows your users to connect to their
          personal storage server. By default it is part of every app that uses
          remoteStorage.js. So every time a user sees the widget, they know
          that they can use their own storage with an app. You can customize
          the widget's appearance to better match your app's design, of course.

          Find out more about integrating the widget in the API docs:
          [displayWidget](http://remotestoragejs.com/doc/code/files/remoteStorage-js.html#remoteStorage.displayWidget)

          <h4 id="modules">2. Categories, Modules &amp; Schemas</h4>

          remoteStorage data is stored in directories – also known as
          "categories" – for which your app requests access (either read-only or
          full). The user grants these permissions via OAuth during the first
          connect from your app.

          For common data, remoteStorage.js uses per-category modules, which
          provide a method of reading and writing a certain defined type of
          data, e.g.  documents, contacts, or images. You can choose from a
          variety of common and custom modules that already exist, or build
          your own.

          Find out more:
          [claimAccess](http://remotestoragejs.com/doc/code/files/remoteStorage-js.html#remoteStorage.claimAccess),
          [defineModule](http://remotestoragejs.com/doc/code/files/remoteStorage-js.html#remoteStorage.defineModule),
          [BaseClient](http://remotestoragejs.com/doc/code/files/lib/baseClient-js.html)

          <h4 id="examples">Example Apps</h4>

          Check out the demo app ["My Favorite
          Drink"](http://remotestorage.github.com/myfavoritedrinks/) ([view
          source](https://github.com/RemoteStorage/myfavoritedrinks)). There‘s
          also a [minimal code
          example](https://github.com/RemoteStorage/remoteStorage.js/blob/master/example/minimal/index.html)
          so you can read the source code without the distraction of tasty
          drinks.

          <h4 id="resources">Resources</h4>

          We're still working on better guides and documentation (and you're
          invited to [contribute](/community/)). However, the library's API
          documentation is pretty extensive and up-to-date, and also includes
          some guides:

          [API docs](http://remotestoragejs.com/doc/code/)

      .unfinished
        :markdown
          This page is still incomplete. Check back soon.
